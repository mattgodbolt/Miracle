/* z80_ops.jscpp: Process the next opcode
   Copyright (c) 1999-2008 Philip Kendall, Witold Filipczyk, Matthew Westcott

   $Id$

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    Contact details: <matthew@west.co.tt>
    Matthew Westcott, 14 Daisy Hill Drive, Adlington, Chorley, Lancs PR6 9NE UNITED KINGDOM
*/
import { 
    z80, 
    z80_instruction_hook, 
    z80_set_irq,
    halfcarry_add_table, 
    halfcarry_sub_table, 
    overflow_add_table, 
    overflow_sub_table,
    sz53_table,
    parity_table,
    sz53p_table,
    z80_interrupt
} from "./z80_full";
import { readbyte, readport, writebyte, writeport } from "../miracle";

export var tstates = 0;
var event_next_event = 0;
export function setTstates(ts) { tstates = ts; }
export function addTstates(ts) { tstates += ts; }
export function setEventNextEvent(e) { event_next_event = e; }
#include "z80_macros.jscpp"

export function sign_extend(v) {
  return v < 128 ? v : v-256;
}

function z80_defaults(ops) {
    for (var i = 0; i < 256; ++i) {
        if (!ops[i]) ops[i] = ops[256];
    }
}

var z80_base_ops = function z80_setup_base_ops() {
    var ops = [];
#include "opcodes_base.jscpp"
    z80_defaults(ops);
    return ops;
}();

var z80_ed_ops = function z80_setup_ed_ops() {
    var ops = [];
#include "z80_ed.jscpp"
    z80_defaults(ops);
    return ops;
}();
function z80_edxx(opcode) { z80_ed_ops[opcode](); }

var z80_cb_ops = function z80_setup_cb_ops() {
    var ops = [];
#include "z80_cb.jscpp"
    z80_defaults(ops);
    return ops;
}();
function z80_cbxx(opcode) { z80_cb_ops[opcode](); }

var z80_dd_ops = function z80_setup_dd_ops() {
    var ops = [];
#define REGISTER IX
#define REGISTERR IX
#define REGISTERH IXH
#define REGISTERL IXL
#include "z80_ddfd.jscpp"
#undef REGISTER
#undef REGISTERR
#undef REGISTERH
#undef REGISTERL
    z80_defaults(ops);
    return ops;
}();
function z80_ddxx(opcode) { z80_dd_ops[opcode](); }

var z80_fd_ops = function z80_setup_fd_ops() {
    var ops = [];
#define REGISTER IY
#define REGISTERR IY
#define REGISTERH IYH
#define REGISTERL IYL
#include "z80_ddfd.jscpp"
#undef REGISTER
#undef REGISTERR
#undef REGISTERH
#undef REGISTERL
    z80_defaults(ops);
    return ops;
}();
function z80_fdxx(opcode) { z80_fd_ops[opcode](); }

var z80_ddfdcb_ops = function z80_setup_ddfdcb_ops() {
    var ops = [];
#include "z80_ddfdcb.jscpp"
    z80_defaults(ops);
    return ops;
}();
function z80_ddfdcbxx(opcode,tempaddr) { z80_ddfdcb_ops[opcode](tempaddr); }

/* Execute Z80 opcodes until the next event */
export function z80_do_opcodes(cycleCallback) {

  while (tstates < event_next_event) {
    if (z80.irq_pending && IFF1) {
        if (z80.irq_suppress) {
            // Prevent triggering of an IRQ on the instruction immediately after an EI
            z80.irq_suppress = false;
        } else {
            z80.irq_suppress = true;
            z80_interrupt(); 
        }
    }

    /* Do the instruction fetch; readbyte_internal used here to avoid
       triggering read breakpoints */
       var oldTstates = tstates;
    addTstates(4); R = (R+1) & 0x7f;
    var opcode = readbyte_internal(PC);
    z80_instruction_hook(PC, opcode);
    PC = (PC + 1) & 0xffff;

    z80_base_ops[opcode]();
    cycleCallback(tstates - oldTstates);
  }
}
